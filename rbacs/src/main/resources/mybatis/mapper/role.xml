<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ants.rbacs.dao.RoleDao">
	<resultMap type="org.ants.rbacs.model.RoleModel" id="roleInfo">
		<id property="id" column="id"/>
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="description" column="description"/>
		<result property="reserved" column="is_reserved"/>
		<result property="createTime" column="create_time"/>
	</resultMap>
	<select id="getById" resultMap="roleInfo">
		SELECT id,name,description,is_reserved,create_time FROM roles WHERE id=#{id}
	</select>
	<select id="getRoles" resultMap="roleInfo">
		SELECT id,name,description,is_reserved,create_time FROM roles res
		<where>
			<if test="role.name!=null and role.name!=''">
				res.name=#{role.name}
			</if>
			<if test="role.reserved!=null and role.reserved!=''">
				and res.reserved=#{role.reserved}
			</if>
		</where>
	</select>
	<insert id="add">
		INSERT INTO roles
		(id,name,description,is_reserved)
		VALUES
		(#{role.id},#{role.name},#{role.description},#{role.reserved})
	</insert>
	<update id="update">
		update roles set name=#{role.name},description=#{role.description},
		create_time=#{role.createTime},is_reserved=#{role.reserved}
		where id=#{role.id} and is_reserved=0
	</update>
	<delete id="delete">
		DELETE FROM roles WHERE id=#{id} and is_reserved=0
	</delete>
	<insert id="addUsers">
		insert ignore into role_users
		(role_id,user_id)
		VALUES
		<foreach collection="userIds" item="userId" index="index" separator=",">
			(#{roleId},#{userId})
		</foreach>
	</insert>
	<delete id="removeUsers">
		DELETE FROM role_users WHERE role_id=#{roleId}
		<if test="userIds!=null and userIds!=''">
			and user_id in (${userIds})
		</if>
	</delete>
	<insert id="addResource">
		insert ignore into role_resources
		(role_id,resource_id)
		VALUES
		<foreach collection="resIds" item="resId" index="index" separator=",">
			(#{roleId},#{resId})
		</foreach>
	</insert>
	<delete id="removeResource">
		DELETE FROM role_resources WHERE role_id=#{roleId}
		<if test="resIds!=null and resIds!=''">
			and resource_id in (${resIds})
		</if>
	</delete>
	<select id="getMembers" resultMap="org.ants.rbacs.dao.MembersDao.memberBaseInfo">
		select u.id,u.username,u.nickname,u.is_admin,u.status from role_users ur 
		left join members u on u.id=ur.user_id 
		where ur.role_id=#{roleId}
	</select>
	<!-- 角色未授权的用户 -->
	<select id="getUnauthMembers" resultMap="org.ants.rbacs.dao.MembersDao.memberBaseInfo">
		select u.id,u.username,u.nickname from members u 
		where (select count(1) as num from role_users ru where ru.role_id=#{roleId} and ru.user_id=u.id)=0
	</select>
	<!-- 获取角色已授权的资源 -->
	<select id="getRes" resultMap="org.ants.rbacs.dao.ResourcesDao.resourcesInfo">
		select r.id,r.type,r.path,r.req_method,r.summary,r.services_name from role_resources rr 
		left join resources r on r.id=rr.resource_id
		where rr.role_id=#{roleId}
	</select>
	<!-- 获取角色未授权的资源 -->
	<select id="getUnauthRes" resultMap="org.ants.rbacs.dao.ResourcesDao.resourcesInfo">
		select r.id,r.type,r.path,r.req_method,r.summary,r.services_name from resources r 
		where (select count(1) as num from role_resources rr 
		where rr.role_id=#{roleId} and rr.resource_id=r.id)=0
	</select>
</mapper>