package org.ants.common.utils;

import java.io.BufferedReader;  
import java.io.InputStreamReader;  
import java.net.InetAddress;  
import java.net.UnknownHostException;  
import java.util.regex.Matcher;  
import java.util.regex.Pattern;  
  
import javax.servlet.http.HttpServletRequest;  
  
/** 
 * 获取系统的信息 
 * @author liuyazhuang 
 * 
 */  
public final class SystemUtils {  
    /** 
     * 获取访问者IP 
     * 在一般情况下使用Request.getRemoteAddr()即可，但是经过nginx等反向代理软件后，这个方法会失效。 
     *  
     * 本方法先从Header中获取X-Real-IP，如果不存在再从X-Forwarded-For获得第一个IP(用,分割)， 
     * 如果还不存在则调用Request .getRemoteAddr()。 
     * @param request 
     * @return 
     */  
    public static String getIpAddr(HttpServletRequest request) {  
        String ip = request.getHeader("X-Real-IP");  
        String unknown = "unknown";
        if (ip!= null && !"".equals(ip) && !unknown.equalsIgnoreCase(ip)) {  
            return ip;  
        }  
        ip = request.getHeader("X-Forwarded-For");  
        if (ip!= null && !"".equals(ip)  && !unknown.equalsIgnoreCase(ip)) {  
            // 多次反向代理后会有多个IP值，第一个为真实IP。  
            int index = ip.indexOf(',');  
            if (index != -1) {  
                return ip.substring(0, index);  
            } else {  
                return ip;  
            }  
        } else {  
            return request.getRemoteAddr();  
        }  
    }  
      
    /** 
     * 获取来访者的浏览器版本 
     * @param request 
     * @return 
     */  
    public static String getRequestBrowserInfo(HttpServletRequest request){  
        String browserVersion = null;  
        String header = request.getHeader("user-agent");  
        if(header == null || header.equals("")){  
           return "";  
         }  
        String msie = "MSIE";
        String firefox = "Firefox";
        String chrome = "Chrome";
        String safari = "Safari";
        String camino = "Camino";
        String konqueror = "Konqueror";
        if(header.indexOf(msie)>0){  
            browserVersion = "IE";  
        }else if(header.indexOf(firefox)>0){  
            browserVersion = firefox;  
        }else if(header.indexOf(chrome)>0){  
            browserVersion = chrome;  
        }else if(header.indexOf(safari)>0){  
            browserVersion = safari;  
        }else if(header.indexOf(camino)>0){  
            browserVersion = camino;  
        }else if(header.indexOf(konqueror)>0){  
            browserVersion = konqueror;  
        }  
        return browserVersion;
    }  
  
    /** 
     * 获取系统版本信息 
     * @param request 
     * @return 
     */  
    public static String getRequestSystemInfo(HttpServletRequest request){  
    	
		String header = request.getHeader("user-agent");  
		if(header == null || header.equals("")){  
			return "";  
		}  
        //得到用户的操作系统  
		String nt63 = "NT 6.3";
		String nt62 = "NT 6.2";
		String nt61 = "NT 6.1";
		String nt60 = "NT 6.0";
		String nt52 = "NT 5.2";
		String nt51 = "NT 5.1";
		String nt5	= "NT 5";
		String nt4	= "NT 4";
		String me	= "Me";
		String nineEight = "98";
		String nineFive = "98";
		String mac  = "Mac";
		String unix = "Unix";
		String linux = "Linux";
		String sunOS = "SunOS";
		if (header.indexOf(nt60) > 0){  
			return "Windows Vista/Server 2008";  
		} else if (header.indexOf(nt52) > 0){  
		    return "Windows Server 2003";  
		} else if (header.indexOf(nt51) > 0){  
		    return "Windows XP";  
		} else if (header.indexOf(nt60) > 0){  
		    return "Windows Vista";  
		} else if (header.indexOf(nt61) > 0){  
		    return "Windows 7";  
		} else if (header.indexOf(nt62) > 0){  
		    return "Windows Slate";  
		} else if (header.indexOf(nt63) > 0){  
		    return "Windows 9";  
		} else if (header.indexOf(nt5) > 0){  
		    return "Windows 2000";  
		} else if (header.indexOf(nt4) > 0){  
		    return "Windows NT4";  
		} else if (header.indexOf(me) > 0){  
		    return "Windows Me";  
		} else if (header.indexOf(nineEight) > 0){  
		    return "Windows 98";  
		} else if (header.indexOf(nineFive) > 0){  
		    return "Windows 95";  
		} else if (header.indexOf(mac) > 0){  
		    return "Mac";  
		} else if (header.indexOf(unix) > 0){  
		    return "UNIX";  
		} else if (header.indexOf(linux) > 0){  
		    return "Linux";  
		} else if (header.indexOf(sunOS) > 0){  
		    return "SunOS";  
		}  
		return null;
     }  
      
    /** 
     * 获取来访者的主机名称 
     * @param ip 
     * @return 
     */  
    public static String getHostName(String ip){  
        InetAddress inet;  
        try {  
            inet = InetAddress.getByName(ip);  
            return inet.getHostName();  
        } catch (UnknownHostException e) {  
            e.printStackTrace();  
        }  
        return "";  
    }   
      
    /** 
     * 命令获取mac地址 
     * @param cmd 
     * @return 
     */  
    private static String callCmd(String[] cmd) {  
      String result = "";  
      String line = "";  
        try {  
            Process proc = Runtime.getRuntime().exec(cmd);  
            InputStreamReader is = new InputStreamReader(proc.getInputStream());  
            BufferedReader br = new BufferedReader (is);  
            while ((line = br.readLine ()) != null) {  
                 result += line;  
            }  
       }catch(Exception e) {  
            e.printStackTrace();  
       }  
          return result;  
    }  
        /** 
         * 
         * 
         * 
         * @param cmd 
         *            第一个命令 
         * 
         * @param another 
         *            第二个命令 
         * 
         * @return 第二个命令的执行结果 
         * 
         */  
  
        private static String callCmd(String[] cmd,String[] another) {  
           String result = "";  
           String line = "";  
           try {  
              Runtime rt = Runtime.getRuntime();  
              Process proc = rt.exec(cmd);  
              proc.waitFor(); // 已经执行完第一个命令，准备执行第二个命令  
              proc = rt.exec(another);  
              InputStreamReader is = new InputStreamReader(proc.getInputStream());  
              BufferedReader br = new BufferedReader (is);  
              while ((line = br.readLine ()) != null) {  
                 result += line;  
              }  
           }catch(Exception e) {  
                e.printStackTrace();  
           }  
              return result;  
        }  
  
        /** 
         * 
         * 
         * 
         * @param ip 
         *            目标ip,一般在局域网内 
         * 
         * @param sourceString 
         *            命令处理的结果字符串 
         * 
         * @param macSeparator 
         *            mac分隔符号 
         * 
         * @return mac地址，用上面的分隔符号表示 
         * 
         */  
  
        private static String filterMacAddress(final String ip, final String sourceString,final String macSeparator) {  
           String result = "";  
           String regExp = "((([0-9,A-F,a-f]{1,2}" + macSeparator + "){1,5})[0-9,A-F,a-f]{1,2})";  
           Pattern pattern = Pattern.compile(regExp);  
           Matcher matcher = pattern.matcher(sourceString);  
           while(matcher.find()){  
             result = matcher.group(1);  
             if(sourceString.indexOf(ip) <= sourceString.lastIndexOf(matcher.group(1))) {  
                break; // 如果有多个IP,只匹配本IP对应的Mac.  
             }  
           }  
            return result;  
        }  
  
        /** 
         * @param ip 
         *            目标ip 
         * @return Mac Address 
         * 
         */  
  
        private static String getMacInWindows(final String ip){  
           String result = "";  
           String[] cmd = {"cmd","/c","ping " + ip};  
           String[] another = {"cmd","/c","arp -a"};  
           String cmdResult = callCmd(cmd,another);  
           result = filterMacAddress(ip,cmdResult,"-");  
           return result;  
        }  
         /** 
          * 
          * @param ip 
          *            目标ip 
          * @return Mac Address 
          * 
          */  
         private static String getMacInLinux(final String ip){   
             String result = "";   
             String[] cmd = {"/bin/sh","-c","ping " +  ip + " -c 2 && arp -a" };   
             String cmdResult = callCmd(cmd);   
             result = filterMacAddress(ip,cmdResult,":");   
             return result;   
         }   
  
         /** 
          * 获取MAC地址 
          * 
          * @return 返回MAC地址 
          */  
         public static String getMacAddress(String ip){  
             String macAddress = "";  
             macAddress = getMacInWindows(ip).trim();  
             if(macAddress==null||"".equals(macAddress)){  
                 macAddress = getMacInLinux(ip).trim();  
             }  
             return macAddress;  
         }  
}